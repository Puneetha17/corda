{
  "swagger": "2.0",
  "info": {
    "description": "",
    "version": "1.0.0",
    "title": "",
    "contact": {}
  },
  "host": "localhost:8080",
  "basePath": "/api/rest/",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/network/nodes": {
      "get": {
        "tags": [
          "network"
        ],
        "description": "Retrieves all nodes if neither query parameter is supplied. Otherwise returns a list of one node matching the supplied query parameter.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "host-and-port",
            "in": "query",
            "description": "[host]:[port] for the Corda P2P of the node",
            "required": false,
            "type": "string",
            "minItems": 0,
            "x-example": "localhost:10000"
          },
          {
            "name": "x500-name",
            "in": "query",
            "description": "the X500 name for the node",
            "required": false,
            "type": "string",
            "minItems": 0,
            "x-example": "O=PartyB, L=New York, C=US"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SimpleNodeInfo"
              }
            }
          },
          "200": {
            "description": "default response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SimpleNodeInfo"
              }
            }
          },
          "500": {
            "description": "server failure"
          }
        }
      }
    },
    "/network/notaries": {
      "get": {
        "tags": [
          "network"
        ],
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x500-name",
            "in": "query",
            "description": "the X500 name for the node",
            "required": false,
            "type": "string",
            "minItems": 0,
            "x-example": "O=PartyB, L=New York, C=US"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Party"
              }
            }
          },
          "200": {
            "description": "default response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Party"
              }
            }
          },
          "500": {
            "description": "server failure"
          }
        }
      }
    },
    "/network/nodes/self": {
      "get": {
        "tags": [
          "network"
        ],
        "description": "Retrieves all nodes if neither query parameter is supplied. Otherwise returns a list of one node matching the supplied query parameter.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "host-and-port",
            "in": "query",
            "description": "[host]:[port] for the Corda P2P of the node",
            "required": false,
            "type": "string",
            "minItems": 0,
            "x-example": "localhost:10000"
          },
          {
            "name": "x500-name",
            "in": "query",
            "description": "the X500 name for the node",
            "required": false,
            "type": "string",
            "minItems": 0,
            "x-example": "O=PartyB, L=New York, C=US"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/SimpleNodeInfo"
            }
          },
          "200": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/SimpleNodeInfo"
            }
          },
          "500": {
            "description": "server failure"
          }
        }
      }
    },
    "/cordapps/flows": {
      "get": {
        "tags": [
          "network"
        ],
        "description": "Retrieves a list of callable flows. Example [\"net.corda.core.flows.ContractUpgradeFlow$Authorise\"]",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "200": {
            "description": "default response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "server failure"
          }
        }
      }
    }
  },
  "definitions": {
    "CordaX500Name": {
      "type": "object",
      "properties": {
        "commonName": {
          "type": "string"
        },
        "organisationUnit": {
          "type": "string"
        },
        "organisation": {
          "type": "string"
        },
        "locality": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "x500Principal": {
          "$ref": "#/definitions/X500Principal"
        }
      }
    },
    "NetworkHostAndPort": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Party": {
      "type": "object",
      "properties": {
        "owningKey": {
          "$ref": "#/definitions/PublicKey"
        },
        "name": {
          "$ref": "#/definitions/CordaX500Name"
        }
      }
    },
    "PublicKey": {
      "type": "object",
      "properties": {
        "encoded": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "algorithm": {
          "type": "string"
        },
        "format": {
          "type": "string"
        }
      }
    },
    "SimpleNodeInfo": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkHostAndPort"
          }
        },
        "legalIdentities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Party"
          }
        }
      }
    },
    "X500Principal": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "encoded": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "Amount": {
      "type": "object",
      "properties": {
        "quantity": {
          "type": "integer",
          "format": "int64"
        },
        "displayTokenSize": {
          "type": "number"
        },
        "token": {
          "type": "object"
        }
      }
    },
    "AmountCurrency": {
      "type": "object",
      "properties": {
        "quantity": {
          "type": "integer",
          "format": "int64"
        },
        "displayTokenSize": {
          "type": "number"
        },
        "token": {
          "$ref": "#/definitions/Currency"
        }
      }
    },
    "Currency": {
      "type": "object",
      "properties": {
        "currencyCode": {
          "type": "string"
        },
        "defaultFractionDigits": {
          "type": "integer",
          "format": "int32"
        },
        "numericCode": {
          "type": "integer",
          "format": "int32"
        },
        "displayName": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      }
    },
    "OpaqueBytes": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "bytes": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "AbstractParty": {
      "type": "object",
      "properties": {
        "owningKey": {
          "$ref": "#/definitions/PublicKey"
        }
      }
    },
    "AttachmentConstraint": {
      "type": "object"
    },
    "ContractState": {
      "type": "object",
      "properties": {
        "participants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AbstractParty"
          }
        }
      }
    },
    "SecureHash": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "bytes": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "StateAndRef": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/TransactionStateContractState"
        },
        "ref": {
          "$ref": "#/definitions/StateRef"
        }
      }
    },
    "StateAndRefObject": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/TransactionStateObject"
        },
        "ref": {
          "$ref": "#/definitions/StateRef"
        }
      }
    },
    "StateRef": {
      "type": "object",
      "properties": {
        "txhash": {
          "$ref": "#/definitions/SecureHash"
        },
        "index": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TransactionState": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ContractState"
        },
        "contract": {
          "type": "string"
        },
        "notary": {
          "$ref": "#/definitions/Party"
        },
        "encumbrance": {
          "type": "integer",
          "format": "int32"
        },
        "constraint": {
          "$ref": "#/definitions/AttachmentConstraint"
        }
      }
    },
    "TransactionStateContractState": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ContractState"
        },
        "contract": {
          "type": "string"
        },
        "notary": {
          "$ref": "#/definitions/Party"
        },
        "encumbrance": {
          "type": "integer",
          "format": "int32"
        },
        "constraint": {
          "$ref": "#/definitions/AttachmentConstraint"
        }
      }
    },
    "TransactionStateObject": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object"
        },
        "contract": {
          "type": "string"
        },
        "notary": {
          "$ref": "#/definitions/Party"
        },
        "encumbrance": {
          "type": "integer",
          "format": "int32"
        },
        "constraint": {
          "$ref": "#/definitions/AttachmentConstraint"
        }
      }
    },
    "IssueRequest": {
      "type": "object",
      "properties": {
        "amount": {
          "$ref": "#/definitions/AmountCurrency"
        },
        "issueRef": {
          "$ref": "#/definitions/OpaqueBytes"
        },
        "notary": {
          "$ref": "#/definitions/Party"
        }
      }
    }
  }
}