package org.web3j.examples.obligation

import org.web3j.corda.api.CorDapp
import org.web3j.corda.api.Flow
import org.web3j.corda.api.FlowResource
import org.web3j.corda.dapps.LifeCycle
import org.web3j.corda.model.CordaX500Name
import org.web3j.corda.model.SignedTransaction
import org.web3j.corda.protocol.Corda
import org.web3j.corda.protocol.ProxyBuilder
import org.web3j.corda.validation.X500Name
import java.io.File
import javax.annotation.processing.Generated
import javax.validation.Valid
import javax.ws.rs.Consumes
import javax.ws.rs.POST
import javax.ws.rs.Path
import javax.ws.rs.Produces
import javax.ws.rs.core.MediaType

/**
 * Obligation CorDapp wrapper.
 */
@Path("api/rest/cordapps/obligation-cordapp")
@Generated(comments = "This will be generated by web3j-corda")
interface Obligation : CorDapp {

    @get:Path("flows")
    override val flows: ObligationFlowResource

    interface ObligationFlowResource : FlowResource {

        /**
         * Get the Issue flow.
         */
        @get:Path("issue-obligation")
        val issue: Issue

        /**
         * Obligation Issue flow.
         */
        interface Issue : Flow {

            /**
             * Parameters for the Issue flow.
             */
            data class InitiatorParameters(
                val amount: String,
                @X500Name
                val lender: CordaX500Name,
                val anonymous: Boolean
            )

            /**
             * Start the Issue flow.
             */
            @POST
            @Produces(MediaType.APPLICATION_JSON)
            @Consumes(MediaType.APPLICATION_JSON)
            fun start(@Valid parameters: InitiatorParameters): SignedTransaction
        }
    }

    /**
     * Obligation CorDapp lifecycle methods.
     */
    companion object : LifeCycle<Obligation> {

        override fun upgrade(corda: Corda, file: File): Obligation =
            TODO("not implemented")

        override fun deploy(corda: Corda, file: File): Obligation =
            TODO("not implemented")

        /**
         * Loads an existing Obligation CorDapp instance.
         */
        @JvmStatic
        override fun load(corda: Corda) =
            ProxyBuilder.build(Obligation::class.java, corda.service)
    }
}
