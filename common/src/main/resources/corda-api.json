{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "",
    "description" : "",
    "contact" : { },
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "http://localhost:8080/api/rest"
  } ],
  "paths" : {
    "/network/nodes" : {
      "get" : {
        "tags" : [ "network" ],
        "description" : "",
        "parameters" : [ {
          "name" : "host-and-port",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "x500-name",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/io.bluebank.braid.corda.services.SimpleNodeInfo"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/network/notaries" : {
      "get" : {
        "tags" : [ "network" ],
        "description" : "",
        "parameters" : [ {
          "name" : "x500-name",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/net.corda.core.identity.Party"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/network/nodes/self" : {
      "get" : {
        "tags" : [ "network" ],
        "description" : "",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/io.bluebank.braid.corda.services.SimpleNodeInfo"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/vault/vaultQuery" : {
      "get" : {
        "tags" : [ "vault" ],
        "description" : "",
        "parameters" : [ {
          "name" : "contract-state-type",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_Page_net_corda_core_contracts_ContractState"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/vault/vaultQueryBy" : {
      "post" : {
        "tags" : [ "vault" ],
        "description" : "",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "vault",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/io.bluebank.braid.corda.services.vault.VaultQuery"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_Page_net_corda_core_contracts_ContractState"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps" : {
      "get" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/{cordapp}/flows" : {
      "get" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "parameters" : [ {
          "name" : "cordapp",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/corda-core/flows/net.corda.core.flows.ContractUpgradeFlow$Authorise" : {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generated.net.corda.core.flows.ContractUpgradeFlow_AuthorisePayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "empty response"
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/corda-core/flows/net.corda.core.flows.ContractUpgradeFlow$Deauthorise" : {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generated.net.corda.core.flows.ContractUpgradeFlow_DeauthorisePayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "empty response"
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/corda-finance-workflows/flows/net.corda.finance.flows.CashExitFlow" : {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generated.net.corda.finance.flows.CashExitFlowPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.finance.flows.AbstractCashFlow_Result"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/corda-finance-workflows/flows/net.corda.finance.flows.CashIssueAndPaymentFlow" : {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generated.net.corda.finance.flows.CashIssueAndPaymentFlowPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.finance.flows.AbstractCashFlow_Result"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/corda-finance-workflows/flows/net.corda.finance.flows.CashIssueFlow" : {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generated.net.corda.finance.flows.CashIssueFlowPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.finance.flows.AbstractCashFlow_Result"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/corda-finance-workflows/flows/net.corda.finance.flows.CashPaymentFlow" : {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generated.net.corda.finance.flows.CashPaymentFlowPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.finance.flows.AbstractCashFlow_Result"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/corda-finance-workflows/flows/net.corda.finance.internal.CashConfigDataFlow" : {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generated.net.corda.finance.internal.CashConfigDataFlowPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.finance.internal.CashConfiguration"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/obligation/flows/net.corda.examples.obligation.flows.IssueObligation$Initiator" : {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generated.net.corda.examples.obligation.flows.IssueObligation_InitiatorPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.core.transactions.SignedTransaction"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/obligation/flows/net.corda.examples.obligation.flows.SettleObligation$Initiator" : {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generated.net.corda.examples.obligation.flows.SettleObligation_InitiatorPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.core.transactions.SignedTransaction"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cordapps/obligation/flows/net.corda.examples.obligation.flows.TransferObligation$Initiator" : {
      "post" : {
        "tags" : [ "cordapps" ],
        "description" : "",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/generated.net.corda.examples.obligation.flows.TransferObligation_InitiatorPayload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/net.corda.core.transactions.SignedTransaction"
                }
              }
            }
          },
          "400" : {
            "description" : "the server failed to parse the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "the request could not be processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "io.bluebank.braid.corda.services.SimpleNodeInfo" : {
        "required" : [ "addresses", "legalIdentities" ],
        "type" : "object",
        "properties" : {
          "addresses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.utilities.NetworkHostAndPort"
            }
          },
          "legalIdentities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.identity.Party"
            }
          }
        }
      },
      "net.corda.core.identity.AbstractParty" : {
        "required" : [ "owningKey" ],
        "type" : "object",
        "properties" : {
          "owningKey" : {
            "type" : "string",
            "description" : "Base 58 Encoded Public Key",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.core.identity.Party" : {
        "required" : [ "name", "owningKey" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "CordaX500Name encoded Party",
            "example" : "O=Bank A, L=London, C=GB"
          },
          "owningKey" : {
            "type" : "string",
            "description" : "Base 58 Encoded Public Key",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.core.utilities.NetworkHostAndPort" : {
        "required" : [ "host", "port" ],
        "type" : "object",
        "properties" : {
          "host" : {
            "type" : "string"
          },
          "port" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "io.bluebank.braid.corda.serialisation.mixin.ContractStateMixin" : {
        "type" : "object"
      },
      "net.corda.core.contracts.AttachmentConstraint" : {
        "type" : "object"
      },
      "net.corda.core.contracts.ContractState" : {
        "type" : "object"
      },
      "net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState" : {
        "type" : "object",
        "properties" : {
          "state" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState"
          },
          "ref" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
          }
        }
      },
      "net.corda.core.contracts.StateRef" : {
        "required" : [ "index", "txhash" ],
        "type" : "object",
        "properties" : {
          "txhash" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          },
          "index" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState" : {
        "required" : [ "contract" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.ContractState"
          },
          "contract" : {
            "type" : "string"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "encumbrance" : {
            "type" : "integer",
            "format" : "int32"
          },
          "constraint" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.AttachmentConstraint"
          }
        }
      },
      "net.corda.core.node.services.Vault_ConstraintInfo" : {
        "type" : "object",
        "properties" : {
          "constraint" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.AttachmentConstraint"
          }
        }
      },
      "net.corda.core.node.services.Vault_Page_net_corda_core_contracts_ContractState" : {
        "required" : [ "otherResults", "stateTypes", "states", "statesMetadata", "totalStatesAvailable" ],
        "type" : "object",
        "properties" : {
          "states" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState"
            }
          },
          "statesMetadata" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_StateMetadata"
            }
          },
          "totalStatesAvailable" : {
            "type" : "integer",
            "format" : "int64"
          },
          "stateTypes" : {
            "type" : "string",
            "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
          },
          "otherResults" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "net.corda.core.node.services.Vault_StateMetadata" : {
        "required" : [ "contractStateClassName", "recordedTime", "status" ],
        "type" : "object",
        "properties" : {
          "ref" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
          },
          "contractStateClassName" : {
            "type" : "string"
          },
          "recordedTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "consumedTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "lockId" : {
            "type" : "string"
          },
          "lockUpdateTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "relevancyStatus" : {
            "type" : "string",
            "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
          },
          "constraintInfo" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
          }
        }
      },
      "io.bluebank.braid.corda.serialisation.mixin.PageSpecificationMixin" : {
        "type" : "object"
      },
      "io.bluebank.braid.corda.services.vault.VaultQuery" : {
        "required" : [ "contractStateType" ],
        "type" : "object",
        "properties" : {
          "criteria" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
          },
          "paging" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.PageSpecification"
          },
          "sorting" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.Sort"
          },
          "contractStateType" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          }
        }
      },
      "net.corda.core.node.services.vault.BaseSort" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.ColumnPredicate" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".ColumnPredicate$AggregateFunction" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction",
            ".ColumnPredicate$Between" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Between",
            ".ColumnPredicate$BinaryComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison",
            ".ColumnPredicate$CollectionExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression",
            ".ColumnPredicate$EqualityComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison",
            ".ColumnPredicate$NullExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_NullExpression",
            ".ColumnPredicate$Likeness" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Likeness"
          }
        }
      },
      "net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction" : {
        "required" : [ "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "type" : "object",
          "properties" : {
            "type" : {
              "type" : "string",
              "enum" : [ "COUNT", "AVG", "MIN", "MAX", "SUM" ]
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Between" : {
        "required" : [ "rightFromLiteral", "rightToLiteral" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate"
        }, {
          "type" : "object",
          "properties" : {
            "rightToLiteral" : {
              "type" : "object"
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison" : {
        "required" : [ "operator", "rightLiteral" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate"
        }, {
          "type" : "object",
          "properties" : {
            "operator" : {
              "type" : "string",
              "enum" : [ "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL" ]
            },
            "rightLiteral" : {
              "type" : "object"
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression" : {
        "required" : [ "operator", "rightLiteral" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate"
        }, {
          "type" : "object",
          "properties" : {
            "operator" : {
              "type" : "string",
              "enum" : [ "IN", "NOT_IN", "IN_IGNORE_CASE", "NOT_IN_IGNORE_CASE" ]
            },
            "rightLiteral" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison" : {
        "required" : [ "operator", "rightLiteral" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate"
        }, {
          "type" : "object",
          "properties" : {
            "operator" : {
              "type" : "string",
              "enum" : [ "EQUAL", "NOT_EQUAL", "EQUAL_IGNORE_CASE", "NOT_EQUAL_IGNORE_CASE" ]
            },
            "rightLiteral" : {
              "type" : "object"
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Instant" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".ColumnPredicate$AggregateFunction" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction",
            ".ColumnPredicate$Between" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Between",
            ".ColumnPredicate$BinaryComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison",
            ".ColumnPredicate$CollectionExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression",
            ".ColumnPredicate$EqualityComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison",
            ".ColumnPredicate$NullExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_NullExpression",
            ".ColumnPredicate$Likeness" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Likeness"
          }
        }
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Likeness" : {
        "required" : [ "operator", "rightLiteral" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate"
        }, {
          "type" : "object",
          "properties" : {
            "operator" : {
              "type" : "string",
              "enum" : [ "LIKE", "NOT_LIKE", "LIKE_IGNORE_CASE", "NOT_LIKE_IGNORE_CASE" ]
            },
            "rightLiteral" : {
              "type" : "string"
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Long" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".ColumnPredicate$AggregateFunction" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_AggregateFunction",
            ".ColumnPredicate$Between" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Between",
            ".ColumnPredicate$BinaryComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_BinaryComparison",
            ".ColumnPredicate$CollectionExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_CollectionExpression",
            ".ColumnPredicate$EqualityComparison" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_EqualityComparison",
            ".ColumnPredicate$NullExpression" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_NullExpression",
            ".ColumnPredicate$Likeness" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Likeness"
          }
        }
      },
      "net.corda.core.node.services.vault.ColumnPredicate_NullExpression" : {
        "required" : [ "operator" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate"
        }, {
          "type" : "object",
          "properties" : {
            "operator" : {
              "type" : "string",
              "enum" : [ "IS_NULL", "NOT_NULL" ]
            }
          }
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
        }, {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
        } ]
      },
      "net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.PageSpecification" : {
        "required" : [ "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageSize" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "net.corda.core.node.services.vault.QueryCriteria" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "@class",
          "mapping" : {
            ".QueryCriteria$VaultQueryCriteria" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_VaultQueryCriteria",
            ".QueryCriteria$VaultCustomQueryCriteria" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_VaultCustomQueryCriteria",
            ".QueryCriteria$CommonQueryCriteria" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_CommonQueryCriteria",
            ".QueryCriteria$LinearStateQueryCriteria" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_LinearStateQueryCriteria",
            ".QueryCriteria$FungibleAssetQueryCriteria" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_FungibleAssetQueryCriteria",
            ".QueryCriteria$AndComposition" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_AndComposition",
            ".QueryCriteria$OrComposition" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_OrComposition"
          }
        }
      },
      "net.corda.core.node.services.vault.QueryCriteria_AndComposition" : {
        "required" : [ "a", "b" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "a" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
            },
            "b" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_CommonQueryCriteria" : {
        "required" : [ "constraintTypes", "constraints", "relevancyStatus", "status" ],
        "type" : "object",
        "properties" : {
          "relevancyStatus" : {
            "type" : "string",
            "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
          },
          "constraintTypes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "ALWAYS_ACCEPT", "HASH", "CZ_WHITELISTED", "SIGNATURE" ]
            }
          },
          "constraints" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
            }
          },
          "participants" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
          },
          "contractStateTypes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Java class name",
              "example" : "java.lang.Object"
            }
          }
        }
      },
      "net.corda.core.node.services.vault.QueryCriteria_FungibleAssetQueryCriteria" : {
        "required" : [ "constraintTypes", "constraints", "relevancyStatus", "status" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "participants" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            },
            "owner" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            },
            "quantity" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
            },
            "issuer" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            },
            "issuerRef" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Hex encoded Byte Array",
                "example" : "736F6D654279746573"
              }
            },
            "status" : {
              "type" : "string",
              "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
            },
            "contractStateTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Java class name",
                "example" : "java.lang.Object"
              }
            },
            "relevancyStatus" : {
              "type" : "string",
              "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
            },
            "constraintTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "ALWAYS_ACCEPT", "HASH", "CZ_WHITELISTED", "SIGNATURE" ]
              }
            },
            "constraints" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
              }
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_FungibleStateQueryCriteria" : {
        "required" : [ "constraintTypes", "constraints", "relevancyStatus", "status" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "participants" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            },
            "quantity" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Long"
            },
            "status" : {
              "type" : "string",
              "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
            },
            "contractStateTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Java class name",
                "example" : "java.lang.Object"
              }
            },
            "relevancyStatus" : {
              "type" : "string",
              "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
            },
            "constraintTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "ALWAYS_ACCEPT", "HASH", "CZ_WHITELISTED", "SIGNATURE" ]
              }
            },
            "constraints" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
              }
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_LinearStateQueryCriteria" : {
        "required" : [ "constraintTypes", "constraints", "relevancyStatus", "status" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "participants" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            },
            "uuid" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "uuid"
              }
            },
            "externalId" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "status" : {
              "type" : "string",
              "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
            },
            "contractStateTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Java class name",
                "example" : "java.lang.Object"
              }
            },
            "relevancyStatus" : {
              "type" : "string",
              "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
            },
            "constraintTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "ALWAYS_ACCEPT", "HASH", "CZ_WHITELISTED", "SIGNATURE" ]
              }
            },
            "constraints" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
              }
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_OrComposition" : {
        "required" : [ "a", "b" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "a" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
            },
            "b" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_SoftLockingCondition" : {
        "required" : [ "lockIds", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "UNLOCKED_ONLY", "LOCKED_ONLY", "SPECIFIED", "UNLOCKED_AND_SPECIFIED" ]
          },
          "lockIds" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }
      },
      "net.corda.core.node.services.vault.QueryCriteria_TimeCondition" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "RECORDED", "CONSUMED" ]
          },
          "predicate" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
          }
        }
      },
      "net.corda.core.node.services.vault.QueryCriteria_VaultCustomQueryCriteria" : {
        "required" : [ "constraintTypes", "constraints", "expression", "relevancyStatus", "status" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_net_corda_core_schemas_StatePersistable_Boolean"
            },
            "status" : {
              "type" : "string",
              "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
            },
            "contractStateTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Java class name",
                "example" : "java.lang.Object"
              }
            },
            "relevancyStatus" : {
              "type" : "string",
              "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
            },
            "constraintTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "ALWAYS_ACCEPT", "HASH", "CZ_WHITELISTED", "SIGNATURE" ]
              }
            },
            "constraints" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
              }
            },
            "participants" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.QueryCriteria_VaultQueryCriteria" : {
        "required" : [ "constraintTypes", "constraints", "relevancyStatus", "status" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria"
        }, {
          "type" : "object",
          "properties" : {
            "status" : {
              "type" : "string",
              "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
            },
            "contractStateTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Java class name",
                "example" : "java.lang.Object"
              }
            },
            "stateRefs" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
              }
            },
            "notary" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            },
            "softLockingCondition" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_SoftLockingCondition"
            },
            "timeCondition" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.QueryCriteria_TimeCondition"
            },
            "relevancyStatus" : {
              "type" : "string",
              "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
            },
            "constraintTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "ALWAYS_ACCEPT", "HASH", "CZ_WHITELISTED", "SIGNATURE" ]
              }
            },
            "constraints" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_ConstraintInfo"
              }
            },
            "participants" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              }
            }
          }
        } ]
      },
      "net.corda.core.node.services.vault.Sort" : {
        "required" : [ "columns" ],
        "type" : "object",
        "properties" : {
          "columns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.Sort_SortColumn"
            }
          }
        }
      },
      "net.corda.core.node.services.vault.SortAttribute" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.Sort_SortColumn" : {
        "required" : [ "direction" ],
        "type" : "object",
        "properties" : {
          "sortAttribute" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.SortAttribute"
          },
          "direction" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }
      },
      "generated.net.corda.core.flows.ContractUpgradeFlow_AuthorisePayload" : {
        "type" : "object",
        "properties" : {
          "stateAndRef" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateAndRef_Object"
          },
          "upgradedContractClass" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          }
        }
      },
      "net.corda.core.contracts.StateAndRef_Object" : {
        "type" : "object",
        "properties" : {
          "state" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.TransactionState_Object"
          },
          "ref" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
          }
        }
      },
      "net.corda.core.contracts.TransactionState_Object" : {
        "required" : [ "contract", "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "object"
          },
          "contract" : {
            "type" : "string"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "encumbrance" : {
            "type" : "integer",
            "format" : "int32"
          },
          "constraint" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.AttachmentConstraint"
          }
        }
      },
      "generated.net.corda.core.flows.ContractUpgradeFlow_DeauthorisePayload" : {
        "type" : "object",
        "properties" : {
          "stateRef" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
          }
        }
      },
      "net.corda.core.contracts.StateAndRef" : {
        "type" : "object",
        "properties" : {
          "state" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState"
          },
          "ref" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
          }
        }
      },
      "net.corda.client.jackson.JacksonSupport_SignedTransactionMixin" : {
        "required" : [ "signatures", "transaction" ],
        "type" : "object",
        "properties" : {
          "transaction" : {
            "$ref" : "#/components/schemas/net.corda.core.transactions.CoreTransaction"
          },
          "signatures" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Hex encoded Byte Array",
              "example" : "736F6D654279746573"
            }
          }
        }
      },
      "net.corda.core.transactions.BaseTransaction" : {
        "required" : [ "id", "inputs", "outputStates", "outputs", "references" ],
        "type" : "object",
        "properties" : {
          "inputs" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "references" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "outputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState"
            }
          },
          "outputStates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.ContractState"
            }
          },
          "id" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.core.transactions.CoreTransaction" : {
        "required" : [ "id", "inputs", "outputStates", "outputs", "references" ],
        "type" : "object",
        "properties" : {
          "inputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
            }
          },
          "references" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
            }
          },
          "networkParametersHash" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "outputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.TransactionState_net_corda_core_contracts_ContractState"
            }
          },
          "outputStates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.ContractState"
            }
          },
          "id" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.core.transactions.SignedTransaction" : {
        "required" : [ "missingSigners", "notaryChangeTransaction", "references", "signatures" ],
        "type" : "object",
        "properties" : {
          "signatures" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Hex encoded Byte Array",
              "example" : "736F6D654279746573"
            }
          },
          "coreTransaction" : {
            "$ref" : "#/components/schemas/net.corda.core.transactions.CoreTransaction"
          },
          "references" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
            }
          },
          "networkParametersHash" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          },
          "notaryChangeTransaction" : {
            "type" : "boolean"
          },
          "missingSigners" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Base 58 Encoded Public Key",
              "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
            }
          }
        }
      },
      "net.corda.finance.flows.AbstractCashFlow_Result" : {
        "type" : "object",
        "properties" : {
          "stx" : {
            "$ref" : "#/components/schemas/net.corda.core.transactions.SignedTransaction"
          },
          "recipient" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
          }
        }
      },
      "AmountCurrency" : {
        "required" : [ "displayTokenSize", "quantity", "token" ],
        "type" : "object",
        "properties" : {
          "quantity" : {
            "type" : "integer",
            "description" : "total amount in minor units",
            "format" : "int32",
            "example" : 100
          },
          "displayTokenSize" : {
            "type" : "number",
            "example" : 0.01
          },
          "token" : {
            "type" : "string",
            "example" : "GBP"
          }
        }
      },
      "generated.net.corda.finance.flows.CashExitFlowPayload" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "issuerRef" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          }
        }
      },
      "generated.net.corda.finance.flows.CashIssueAndPaymentFlowPayload" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "issueRef" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          },
          "recipient" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "anonymous" : {
            "type" : "boolean"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          }
        }
      },
      "generated.net.corda.finance.flows.CashIssueFlowPayload" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "issuerBankPartyRef" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          }
        }
      },
      "generated.net.corda.finance.flows.CashPaymentFlowPayload" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "recipient" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "anonymous" : {
            "type" : "boolean"
          },
          "issuerConstraint" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.identity.Party"
            }
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          }
        }
      },
      "net.corda.finance.internal.CashConfiguration" : {
        "required" : [ "issuableCurrencies", "supportedCurrencies" ],
        "type" : "object",
        "properties" : {
          "issuableCurrencies" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "3 digit ISO 4217 code of the currency",
              "example" : "GBP"
            }
          },
          "supportedCurrencies" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "3 digit ISO 4217 code of the currency",
              "example" : "GBP"
            }
          }
        }
      },
      "generated.net.corda.finance.internal.CashConfigDataFlowPayload" : {
        "type" : "object"
      },
      "generated.net.corda.examples.obligation.flows.IssueObligation_InitiatorPayload" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "lender" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "anonymous" : {
            "type" : "boolean"
          }
        }
      },
      "generated.net.corda.examples.obligation.flows.SettleObligation_InitiatorPayload" : {
        "type" : "object",
        "properties" : {
          "linearId" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.UniqueIdentifier"
          },
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "anonymous" : {
            "type" : "boolean"
          }
        }
      },
      "net.corda.core.contracts.UniqueIdentifier" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "externalId" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "generated.net.corda.examples.obligation.flows.TransferObligation_InitiatorPayload" : {
        "type" : "object",
        "properties" : {
          "linearId" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.UniqueIdentifier"
          },
          "newLender" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "anonymous" : {
            "type" : "boolean"
          }
        }
      },
      "net.corda.confidential.CertificateOwnershipAssertion" : {
        "required" : [ "publicKey", "x500Name" ],
        "type" : "object",
        "properties" : {
          "x500Name" : {
            "type" : "string",
            "description" : "CordaX500Name encoded Party",
            "example" : "O=Bank A, L=London, C=GB"
          },
          "publicKey" : {
            "type" : "string",
            "description" : "Base 58 Encoded Public Key",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.confidential.SwapIdentitiesFlow_IdentityWithSignature" : {
        "required" : [ "identity", "signature" ],
        "type" : "object",
        "properties" : {
          "identity" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          },
          "signature" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          }
        }
      },
      "net.corda.core.context.Actor" : {
        "required" : [ "owningLegalIdentity" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/net.corda.core.context.Actor_Id"
          },
          "serviceId" : {
            "$ref" : "#/components/schemas/net.corda.core.context.AuthServiceId"
          },
          "owningLegalIdentity" : {
            "type" : "string",
            "description" : "CordaX500Name encoded Party",
            "example" : "O=Bank A, L=London, C=GB"
          }
        }
      },
      "net.corda.core.context.Actor_Id" : {
        "required" : [ "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "net.corda.core.context.AuthServiceId" : {
        "required" : [ "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "net.corda.core.context.InvocationContext" : {
        "type" : "object",
        "properties" : {
          "origin" : {
            "$ref" : "#/components/schemas/net.corda.core.context.InvocationOrigin"
          },
          "trace" : {
            "$ref" : "#/components/schemas/net.corda.core.context.Trace"
          },
          "actor" : {
            "$ref" : "#/components/schemas/net.corda.core.context.Actor"
          },
          "externalTrace" : {
            "$ref" : "#/components/schemas/net.corda.core.context.Trace"
          },
          "impersonatedActor" : {
            "$ref" : "#/components/schemas/net.corda.core.context.Actor"
          }
        }
      },
      "net.corda.core.context.InvocationOrigin" : {
        "type" : "object"
      },
      "net.corda.core.context.Trace" : {
        "type" : "object",
        "properties" : {
          "invocationId" : {
            "$ref" : "#/components/schemas/net.corda.core.context.Trace_InvocationId"
          },
          "sessionId" : {
            "$ref" : "#/components/schemas/net.corda.core.context.Trace_SessionId"
          }
        }
      },
      "net.corda.core.context.Trace_InvocationId" : {
        "required" : [ "timestamp", "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          },
          "timestamp" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "entityType" : {
            "type" : "string"
          }
        }
      },
      "net.corda.core.context.Trace_SessionId" : {
        "required" : [ "timestamp", "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          },
          "timestamp" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "entityType" : {
            "type" : "string"
          }
        }
      },
      "net.corda.core.utilities.Id" : {
        "required" : [ "timestamp", "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "object"
          },
          "entityType" : {
            "type" : "string"
          },
          "timestamp" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          }
        }
      },
      "net.corda.core.context.InvocationOrigin_Peer" : {
        "required" : [ "party" ],
        "type" : "object",
        "properties" : {
          "party" : {
            "type" : "string",
            "description" : "CordaX500Name encoded Party",
            "example" : "O=Bank A, L=London, C=GB"
          }
        }
      },
      "net.corda.core.context.InvocationOrigin_RPC" : {
        "type" : "object",
        "properties" : {
          "actor" : {
            "$ref" : "#/components/schemas/net.corda.core.context.Actor"
          }
        }
      },
      "net.corda.core.context.InvocationOrigin_Scheduled" : {
        "type" : "object",
        "properties" : {
          "scheduledState" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.ScheduledStateRef"
          }
        }
      },
      "net.corda.core.contracts.ScheduledStateRef" : {
        "required" : [ "scheduledAt" ],
        "type" : "object",
        "properties" : {
          "ref" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
          },
          "scheduledAt" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          }
        }
      },
      "net.corda.core.context.InvocationOrigin_Service" : {
        "required" : [ "owningLegalIdentity", "serviceClassName" ],
        "type" : "object",
        "properties" : {
          "serviceClassName" : {
            "type" : "string"
          },
          "owningLegalIdentity" : {
            "type" : "string",
            "description" : "CordaX500Name encoded Party",
            "example" : "O=Bank A, L=London, C=GB"
          }
        }
      },
      "net.corda.core.context.InvocationOrigin_Shell" : {
        "type" : "object"
      },
      "net.corda.core.contracts.AmountTransfer" : {
        "required" : [ "destination", "quantityDelta", "source", "token" ],
        "type" : "object",
        "properties" : {
          "quantityDelta" : {
            "type" : "integer",
            "format" : "int64"
          },
          "destination" : {
            "type" : "object"
          }
        }
      },
      "net.corda.core.contracts.LinearPointer" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "pointer" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.UniqueIdentifier"
          },
          "type" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          }
        }
      },
      "net.corda.core.contracts.StatePointer" : {
        "required" : [ "pointer", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          },
          "pointer" : {
            "type" : "object"
          }
        }
      },
      "net.corda.core.contracts.StaticPointer" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "pointer" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
          },
          "type" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          }
        }
      },
      "net.corda.core.contracts.TransactionState" : {
        "required" : [ "contract" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.ContractState"
          },
          "contract" : {
            "type" : "string"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "encumbrance" : {
            "type" : "integer",
            "format" : "int32"
          },
          "constraint" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.AttachmentConstraint"
          }
        }
      },
      "Error" : {
        "required" : [ "message", "type" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "the error message"
          },
          "type" : {
            "type" : "string",
            "description" : "the type of error"
          }
        }
      },
      "net.corda.core.flows.AbstractStateReplacementFlow_Proposal" : {
        "required" : [ "modification" ],
        "type" : "object",
        "properties" : {
          "stateRef" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
          },
          "modification" : {
            "type" : "object"
          }
        }
      },
      "net.corda.core.flows.FlowInfo" : {
        "required" : [ "appName", "flowVersion" ],
        "type" : "object",
        "properties" : {
          "flowVersion" : {
            "type" : "integer",
            "format" : "int32"
          },
          "appName" : {
            "type" : "string"
          }
        }
      },
      "net.corda.core.flows.NotarisationPayload" : {
        "required" : [ "transaction" ],
        "type" : "object",
        "properties" : {
          "transaction" : {
            "type" : "object"
          },
          "requestSignature" : {
            "$ref" : "#/components/schemas/net.corda.core.flows.NotarisationRequestSignature"
          },
          "coreTransaction" : {
            "$ref" : "#/components/schemas/net.corda.core.transactions.CoreTransaction"
          },
          "signedTransaction" : {
            "$ref" : "#/components/schemas/net.corda.core.transactions.SignedTransaction"
          }
        }
      },
      "net.corda.core.flows.NotarisationRequestSignature" : {
        "required" : [ "digitalSignature", "platformVersion" ],
        "type" : "object",
        "properties" : {
          "digitalSignature" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          },
          "platformVersion" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "net.corda.core.flows.NotarisationRequest" : {
        "required" : [ "statesToConsume", "transactionId" ],
        "type" : "object",
        "properties" : {
          "statesToConsume" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateRef"
            }
          },
          "transactionId" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.core.flows.NotarisationResponse" : {
        "required" : [ "signatures" ],
        "type" : "object",
        "properties" : {
          "signatures" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Hex encoded Byte Array",
              "example" : "736F6D654279746573"
            }
          }
        }
      },
      "net.corda.core.flows.NotaryError" : {
        "type" : "object"
      },
      "net.corda.core.flows.NotaryError_Conflict" : {
        "required" : [ "consumedStates", "txId" ],
        "type" : "object",
        "properties" : {
          "txId" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          },
          "consumedStates" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/net.corda.core.flows.StateConsumptionDetails"
            }
          }
        }
      },
      "net.corda.core.flows.StateConsumptionDetails" : {
        "required" : [ "hashOfTransactionId", "type" ],
        "type" : "object",
        "properties" : {
          "hashOfTransactionId" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "INPUT_STATE", "REFERENCE_INPUT_STATE" ]
          }
        }
      },
      "net.corda.core.flows.NotaryError_General" : {
        "type" : "object",
        "properties" : {
          "cause" : {
            "$ref" : "#/components/schemas/Error"
          }
        }
      },
      "net.corda.core.flows.NotaryError_RequestSignatureInvalid" : {
        "type" : "object",
        "properties" : {
          "cause" : {
            "$ref" : "#/components/schemas/Error"
          }
        }
      },
      "io.bluebank.braid.corda.serialisation.mixin.TimeWindowMixin" : {
        "type" : "object"
      },
      "net.corda.core.contracts.TimeWindow" : {
        "type" : "object",
        "properties" : {
          "untilTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "fromTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "midpoint" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          }
        }
      },
      "net.corda.core.flows.NotaryError_TimeWindowInvalid" : {
        "required" : [ "currentTime" ],
        "type" : "object",
        "properties" : {
          "currentTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "txTimeWindow" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.TimeWindow"
          }
        }
      },
      "net.corda.core.flows.NotaryError_TransactionInvalid" : {
        "type" : "object",
        "properties" : {
          "cause" : {
            "$ref" : "#/components/schemas/Error"
          }
        }
      },
      "net.corda.core.flows.NotaryError_WrongNotary" : {
        "type" : "object"
      },
      "net.corda.core.flows.WaitTimeUpdate" : {
        "required" : [ "waitTime" ],
        "type" : "object",
        "properties" : {
          "waitTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Duration"
          }
        }
      },
      "net.corda.core.identity.PartyAndCertificate" : {
        "required" : [ "certPath", "certificate", "name", "owningKey" ],
        "type" : "object",
        "properties" : {
          "certPath" : {
            "type" : "string",
            "description" : "X509 encoded certificate PKI path",
            "format" : "byte"
          },
          "certificate" : {
            "type" : "string",
            "description" : "X509 encoded certificate",
            "format" : "byte"
          },
          "party" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "name" : {
            "type" : "string",
            "description" : "CordaX500Name encoded Party",
            "example" : "O=Bank A, L=London, C=GB"
          },
          "owningKey" : {
            "type" : "string",
            "description" : "Base 58 Encoded Public Key",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.core.node.NodeInfo" : {
        "required" : [ "addresses", "legalIdentities", "legalIdentitiesAndCerts", "platformVersion", "serial" ],
        "type" : "object",
        "properties" : {
          "addresses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.utilities.NetworkHostAndPort"
            }
          },
          "legalIdentitiesAndCerts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.identity.PartyAndCertificate"
            }
          },
          "platformVersion" : {
            "type" : "integer",
            "format" : "int32"
          },
          "serial" : {
            "type" : "integer",
            "format" : "int64"
          },
          "legalIdentities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.identity.Party"
            }
          }
        }
      },
      "net.corda.core.node.services.NetworkMapCache_MapChange" : {
        "type" : "object",
        "properties" : {
          "node" : {
            "$ref" : "#/components/schemas/net.corda.core.node.NodeInfo"
          }
        }
      },
      "net.corda.core.node.services.NetworkMapCache_MapChange_Added" : {
        "type" : "object",
        "properties" : {
          "node" : {
            "$ref" : "#/components/schemas/net.corda.core.node.NodeInfo"
          }
        }
      },
      "net.corda.core.node.services.NetworkMapCache_MapChange_Modified" : {
        "type" : "object",
        "properties" : {
          "node" : {
            "$ref" : "#/components/schemas/net.corda.core.node.NodeInfo"
          },
          "previousNode" : {
            "$ref" : "#/components/schemas/net.corda.core.node.NodeInfo"
          }
        }
      },
      "net.corda.core.node.services.NetworkMapCache_MapChange_Removed" : {
        "type" : "object",
        "properties" : {
          "node" : {
            "$ref" : "#/components/schemas/net.corda.core.node.NodeInfo"
          }
        }
      },
      "net.corda.core.node.services.Vault" : {
        "required" : [ "states" ],
        "type" : "object",
        "properties" : {
          "states" : {
            "type" : "object"
          }
        }
      },
      "net.corda.core.node.services.Vault_Page" : {
        "required" : [ "otherResults", "stateTypes", "states", "statesMetadata", "totalStatesAvailable" ],
        "type" : "object",
        "properties" : {
          "states" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState"
            }
          },
          "statesMetadata" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.Vault_StateMetadata"
            }
          },
          "totalStatesAvailable" : {
            "type" : "integer",
            "format" : "int64"
          },
          "stateTypes" : {
            "type" : "string",
            "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
          },
          "otherResults" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "net.corda.core.node.services.Vault_Update" : {
        "required" : [ "consumed", "empty", "produced", "references", "type" ],
        "type" : "object",
        "properties" : {
          "consumed" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState"
            }
          },
          "produced" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState"
            }
          },
          "flowId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "GENERAL", "NOTARY_CHANGE", "CONTRACT_UPGRADE" ]
          },
          "references" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.contracts.StateAndRef_net_corda_core_contracts_ContractState"
            }
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "net.corda.core.node.services.vault.AttachmentQueryCriteria" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.AttachmentQueryCriteria_AndComposition" : {
        "type" : "object",
        "properties" : {
          "a" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.AttachmentQueryCriteria"
          },
          "b" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.AttachmentQueryCriteria"
          }
        }
      },
      "net.corda.core.node.services.vault.AttachmentQueryCriteria_AttachmentsQueryCriteria" : {
        "type" : "object",
        "properties" : {
          "uploaderCondition" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_String"
          },
          "filenameCondition" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_String"
          },
          "uploadDateCondition" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Instant"
          },
          "contractClassNamesCondition" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_List_String"
          },
          "signersCondition" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_List_PublicKey"
          },
          "isSignedCondition" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Boolean"
          },
          "versionCondition" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Integer"
          }
        }
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Boolean" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Integer" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.ColumnPredicate_List_PublicKey" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.ColumnPredicate_List_String" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.ColumnPredicate_String" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.AttachmentQueryCriteria_OrComposition" : {
        "type" : "object",
        "properties" : {
          "a" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.AttachmentQueryCriteria"
          },
          "b" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.AttachmentQueryCriteria"
          }
        }
      },
      "net.corda.core.node.services.vault.AttachmentSort" : {
        "required" : [ "columns" ],
        "type" : "object",
        "properties" : {
          "columns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.AttachmentSort_AttachmentSortColumn"
            }
          }
        }
      },
      "net.corda.core.node.services.vault.AttachmentSort_AttachmentSortColumn" : {
        "required" : [ "direction", "sortAttribute" ],
        "type" : "object",
        "properties" : {
          "sortAttribute" : {
            "type" : "string",
            "enum" : [ "INSERTION_DATE", "UPLOADER", "FILENAME", "VERSION" ]
          },
          "direction" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }
      },
      "net.corda.core.node.services.vault.Builder" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.Column" : {
        "required" : [ "declaringClass", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "declaringClass" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          }
        }
      },
      "net.corda.core.node.services.vault.ColumnPredicate_Object" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.Column_Object_Object" : {
        "required" : [ "declaringClass", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "declaringClass" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          }
        }
      },
      "net.corda.core.node.services.vault.CriteriaExpression" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.CriteriaExpression_AggregateFunctionExpression" : {
        "type" : "object",
        "properties" : {
          "column" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.Column_Object_Object"
          },
          "predicate" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
          },
          "groupByColumns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.node.services.vault.Column_Object_Object"
            }
          },
          "orderBy" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }
      },
      "net.corda.core.node.services.vault.CriteriaExpression_BinaryLogical" : {
        "required" : [ "operator" ],
        "type" : "object",
        "properties" : {
          "left" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean"
          },
          "right" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean"
          },
          "operator" : {
            "type" : "string",
            "enum" : [ "AND", "OR" ]
          }
        }
      },
      "net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean" : {
        "type" : "object"
      },
      "net.corda.core.node.services.vault.CriteriaExpression_ColumnPredicateExpression" : {
        "type" : "object",
        "properties" : {
          "column" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.Column_Object_Object"
          },
          "predicate" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.ColumnPredicate_Object"
          }
        }
      },
      "net.corda.core.node.services.vault.CriteriaExpression_Not" : {
        "type" : "object",
        "properties" : {
          "expression" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.CriteriaExpression_Object_Boolean"
          }
        }
      },
      "net.corda.core.node.services.vault.SortAttribute_Custom" : {
        "required" : [ "entityStateClass", "entityStateColumnName" ],
        "type" : "object",
        "properties" : {
          "entityStateClass" : {
            "type" : "string",
            "description" : "Java class name",
            "example" : "java.lang.Object"
          },
          "entityStateColumnName" : {
            "type" : "string"
          }
        }
      },
      "net.corda.core.node.services.vault.SortAttribute_Standard" : {
        "type" : "object",
        "properties" : {
          "attribute" : {
            "$ref" : "#/components/schemas/net.corda.core.node.services.vault.Sort_Attribute"
          }
        }
      },
      "net.corda.core.node.services.vault.Sort_Attribute" : {
        "type" : "object"
      },
      "net.corda.core.schemas.CommonSchemaV1_FungibleState" : {
        "required" : [ "issuerRef", "quantity" ],
        "type" : "object",
        "properties" : {
          "participants" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          },
          "owner" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int64"
          },
          "issuer" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "issuerRef" : {
            "type" : "string",
            "format" : "binary"
          },
          "stateRef" : {
            "$ref" : "#/components/schemas/net.corda.core.schemas.PersistentStateRef"
          }
        }
      },
      "net.corda.core.schemas.PersistentState" : {
        "type" : "object",
        "properties" : {
          "stateRef" : {
            "$ref" : "#/components/schemas/net.corda.core.schemas.PersistentStateRef"
          }
        }
      },
      "net.corda.core.schemas.PersistentStateRef" : {
        "required" : [ "index", "txId" ],
        "type" : "object",
        "properties" : {
          "txId" : {
            "type" : "string"
          },
          "index" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "net.corda.core.schemas.CommonSchemaV1_LinearState" : {
        "required" : [ "uuid" ],
        "type" : "object",
        "properties" : {
          "participants" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
            }
          },
          "externalId" : {
            "type" : "string"
          },
          "uuid" : {
            "type" : "string",
            "format" : "uuid"
          },
          "stateRef" : {
            "$ref" : "#/components/schemas/net.corda.core.schemas.PersistentStateRef"
          }
        }
      },
      "net.corda.core.transactions.ComponentGroup" : {
        "required" : [ "components", "groupIndex" ],
        "type" : "object",
        "properties" : {
          "groupIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "components" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Hex encoded Byte Array",
              "example" : "736F6D654279746573"
            }
          }
        }
      },
      "net.corda.core.transactions.ContractUpgradeFilteredTransaction_FilteredComponent" : {
        "required" : [ "component", "nonce" ],
        "type" : "object",
        "properties" : {
          "component" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          },
          "nonce" : {
            "type" : "string",
            "description" : "Base 58 Encoded Secure Hash",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.finance.contracts.BusinessCalendar" : {
        "required" : [ "holidayDates" ],
        "type" : "object",
        "properties" : {
          "holidayDates" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "JSR310 encoded time representation of LocalDate"
            }
          }
        }
      },
      "net.corda.finance.contracts.Commodity" : {
        "required" : [ "commodityCode", "defaultFractionDigits", "displayName", "displayTokenSize" ],
        "type" : "object",
        "properties" : {
          "commodityCode" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "defaultFractionDigits" : {
            "type" : "integer",
            "format" : "int32"
          },
          "displayTokenSize" : {
            "type" : "number"
          }
        }
      },
      "net.corda.finance.contracts.Expression" : {
        "required" : [ "expr" ],
        "type" : "object",
        "properties" : {
          "expr" : {
            "type" : "string"
          }
        }
      },
      "net.corda.finance.contracts.FixOf" : {
        "required" : [ "forDay", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "forDay" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of LocalDate"
          },
          "ofTenor" : {
            "$ref" : "#/components/schemas/net.corda.finance.contracts.Tenor"
          }
        }
      },
      "net.corda.finance.contracts.Tenor" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          }
        }
      },
      "Issued" : {
        "required" : [ "_productType", "issuer", "product" ],
        "type" : "object",
        "properties" : {
          "issuer" : {
            "required" : [ "party", "reference" ],
            "type" : "object",
            "properties" : {
              "party" : {
                "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
              },
              "reference" : {
                "type" : "string",
                "description" : "Hex encoded Byte Array",
                "example" : "736F6D654279746573"
              }
            }
          },
          "product" : {
            "type" : "object"
          },
          "_productType" : {
            "type" : "string",
            "example" : "java.util.Currency"
          }
        }
      },
      "net.corda.core.contracts.PartyAndReference" : {
        "required" : [ "party", "reference" ],
        "type" : "object",
        "properties" : {
          "party" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "reference" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          }
        }
      },
      "net.corda.core.utilities.NonEmptySet_net_corda_core_contracts_Issued_Object" : {
        "uniqueItems" : true,
        "required" : [ "empty", "size" ],
        "type" : "array",
        "properties" : {
          "elements" : {
            "uniqueItems" : true,
            "type" : "array",
            "writeOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Issued"
            }
          },
          "empty" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "items" : {
          "$ref" : "#/components/schemas/Issued"
        }
      },
      "net.corda.core.utilities.NonEmptySet_net_corda_core_crypto_SecureHash" : {
        "uniqueItems" : true,
        "required" : [ "empty", "size" ],
        "type" : "array",
        "properties" : {
          "elements" : {
            "uniqueItems" : true,
            "type" : "array",
            "writeOnly" : true,
            "items" : {
              "type" : "string",
              "description" : "Base 58 Encoded Secure Hash",
              "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
            }
          },
          "empty" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "items" : {
          "type" : "string",
          "description" : "Base 58 Encoded Secure Hash",
          "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
        }
      },
      "net.corda.finance.contracts.asset.Obligation_Terms" : {
        "required" : [ "acceptableContracts", "acceptableIssuedProducts", "dueBefore", "product", "timeTolerance" ],
        "type" : "object",
        "properties" : {
          "acceptableContracts" : {
            "uniqueItems" : true,
            "required" : [ "empty", "size" ],
            "type" : "array",
            "properties" : {
              "elements" : {
                "uniqueItems" : true,
                "type" : "array",
                "writeOnly" : true,
                "items" : {
                  "type" : "string",
                  "description" : "Base 58 Encoded Secure Hash",
                  "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
                }
              },
              "empty" : {
                "type" : "boolean"
              },
              "size" : {
                "type" : "integer",
                "format" : "int32"
              }
            },
            "items" : {
              "type" : "string",
              "description" : "Base 58 Encoded Secure Hash",
              "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
            }
          },
          "acceptableIssuedProducts" : {
            "uniqueItems" : true,
            "required" : [ "empty", "size" ],
            "type" : "array",
            "properties" : {
              "elements" : {
                "uniqueItems" : true,
                "type" : "array",
                "writeOnly" : true,
                "items" : {
                  "$ref" : "#/components/schemas/Issued"
                }
              },
              "empty" : {
                "type" : "boolean"
              },
              "size" : {
                "type" : "integer",
                "format" : "int32"
              }
            },
            "items" : {
              "$ref" : "#/components/schemas/Issued"
            }
          },
          "dueBefore" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "timeTolerance" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Duration"
          },
          "product" : {
            "type" : "object"
          }
        }
      },
      "net.corda.finance.flows.AbstractCashFlow_AbstractRequest" : {
        "required" : [ "amount" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          }
        }
      },
      "net.corda.finance.flows.CashExitFlow_ExitRequest" : {
        "required" : [ "amount", "issuerRef" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "issuerRef" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          }
        }
      },
      "net.corda.finance.flows.CashIssueAndPaymentFlow_IssueAndPaymentRequest" : {
        "required" : [ "amount", "anonymous", "issueRef" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "issueRef" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          },
          "recipient" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "anonymous" : {
            "type" : "boolean"
          }
        }
      },
      "net.corda.finance.flows.CashIssueFlow_IssueRequest" : {
        "required" : [ "amount", "issueRef" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "issueRef" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          }
        }
      },
      "net.corda.finance.flows.CashPaymentFlow_PaymentRequest" : {
        "required" : [ "amount", "anonymous", "issuerConstraint" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "recipient" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "anonymous" : {
            "type" : "boolean"
          },
          "issuerConstraint" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.identity.Party"
            }
          },
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          }
        }
      },
      "net.corda.finance.contracts.DealState" : {
        "type" : "object",
        "properties" : {
          "linearId" : {
            "$ref" : "#/components/schemas/net.corda.core.contracts.UniqueIdentifier"
          }
        }
      },
      "net.corda.finance.flows.TwoPartyDealFlow_AutoOffer" : {
        "type" : "object",
        "properties" : {
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "dealBeingOffered" : {
            "$ref" : "#/components/schemas/net.corda.finance.contracts.DealState"
          }
        }
      },
      "net.corda.core.identity.AnonymousParty" : {
        "required" : [ "owningKey" ],
        "type" : "object",
        "properties" : {
          "owningKey" : {
            "type" : "string",
            "description" : "Base 58 Encoded Public Key",
            "example" : "GfHq2tTVk9z4eXgyUuofmR16H6j7srXt8BCyidKdrZL5JEwFqHgDSuiinbTE"
          }
        }
      },
      "net.corda.finance.flows.TwoPartyDealFlow_Handshake" : {
        "required" : [ "payload" ],
        "type" : "object",
        "properties" : {
          "payload" : {
            "type" : "object"
          },
          "primaryIdentity" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AnonymousParty"
          },
          "secondaryIdentity" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AnonymousParty"
          }
        }
      },
      "net.corda.finance.flows.TwoPartyTradeFlow_SellerTradeInfo" : {
        "required" : [ "price" ],
        "type" : "object",
        "properties" : {
          "price" : {
            "$ref" : "#/components/schemas/AmountCurrency"
          },
          "payToIdentity" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.PartyAndCertificate"
          }
        }
      },
      "net.corda.core.schemas.MappedSchema" : {
        "required" : [ "mappedTypes", "name", "version" ],
        "type" : "object",
        "properties" : {
          "schemaFamily" : {
            "type" : "string",
            "description" : "Java class name",
            "writeOnly" : true,
            "example" : "java.lang.Object"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mappedTypes" : {
            "type" : "object"
          },
          "name" : {
            "type" : "string"
          },
          "migrationResource" : {
            "type" : "string"
          }
        }
      },
      "net.corda.finance.schemas.CashSchemaV1" : {
        "required" : [ "mappedTypes", "migrationResource", "name", "version" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "migrationResource" : {
            "type" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mappedTypes" : {
            "type" : "object"
          }
        }
      },
      "net.corda.finance.schemas.CashSchemaV1_PersistentCashState" : {
        "required" : [ "currency", "issuerPartyHash", "issuerRef", "pennies" ],
        "type" : "object",
        "properties" : {
          "owner" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "pennies" : {
            "type" : "integer",
            "format" : "int64"
          },
          "currency" : {
            "type" : "string"
          },
          "issuerPartyHash" : {
            "type" : "string"
          },
          "issuerRef" : {
            "type" : "string",
            "format" : "binary"
          },
          "stateRef" : {
            "$ref" : "#/components/schemas/net.corda.core.schemas.PersistentStateRef"
          }
        }
      },
      "net.corda.finance.schemas.CommercialPaperSchemaV1" : {
        "required" : [ "mappedTypes", "migrationResource", "name", "version" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "migrationResource" : {
            "type" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mappedTypes" : {
            "type" : "object"
          }
        }
      },
      "net.corda.finance.schemas.CommercialPaperSchemaV1_PersistentCommercialPaperState" : {
        "required" : [ "currency", "faceValue", "faceValueIssuerPartyHash", "faceValueIssuerRef", "issuancePartyHash", "issuanceRef", "maturity", "ownerHash" ],
        "type" : "object",
        "properties" : {
          "issuancePartyHash" : {
            "type" : "string"
          },
          "issuanceRef" : {
            "type" : "string",
            "format" : "binary"
          },
          "ownerHash" : {
            "type" : "string"
          },
          "maturity" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "faceValue" : {
            "type" : "integer",
            "format" : "int64"
          },
          "currency" : {
            "type" : "string"
          },
          "faceValueIssuerPartyHash" : {
            "type" : "string"
          },
          "faceValueIssuerRef" : {
            "type" : "string",
            "format" : "binary"
          },
          "stateRef" : {
            "$ref" : "#/components/schemas/net.corda.core.schemas.PersistentStateRef"
          }
        }
      },
      "net.corda.node.services.transactions.PersistentUniquenessProvider_Request" : {
        "required" : [ "requestDate", "requestSignature" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "consumingTxHash" : {
            "type" : "string"
          },
          "partyName" : {
            "type" : "string"
          },
          "requestSignature" : {
            "type" : "string",
            "format" : "binary"
          },
          "requestDate" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          }
        }
      },
      "net.corda.node.services.vault.VaultSchemaV1" : {
        "required" : [ "mappedTypes", "migrationResource", "name", "version" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "migrationResource" : {
            "type" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mappedTypes" : {
            "type" : "object"
          }
        }
      },
      "net.corda.node.services.vault.VaultSchemaV1_VaultFungibleStates" : {
        "required" : [ "quantity" ],
        "type" : "object",
        "properties" : {
          "owner" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int64"
          },
          "issuer" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.AbstractParty"
          },
          "issuerRef" : {
            "type" : "string",
            "format" : "binary"
          },
          "stateRef" : {
            "$ref" : "#/components/schemas/net.corda.core.schemas.PersistentStateRef"
          }
        }
      },
      "net.corda.node.services.vault.VaultSchemaV1_VaultLinearStates" : {
        "required" : [ "uuid" ],
        "type" : "object",
        "properties" : {
          "externalId" : {
            "type" : "string"
          },
          "uuid" : {
            "type" : "string",
            "format" : "uuid"
          },
          "stateRef" : {
            "$ref" : "#/components/schemas/net.corda.core.schemas.PersistentStateRef"
          }
        }
      },
      "net.corda.node.services.vault.VaultSchemaV1_VaultStates" : {
        "required" : [ "constraintType", "contractStateClassName", "recordedTime", "relevancyStatus", "stateStatus" ],
        "type" : "object",
        "properties" : {
          "notary" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          },
          "contractStateClassName" : {
            "type" : "string"
          },
          "stateStatus" : {
            "type" : "string",
            "enum" : [ "UNCONSUMED", "CONSUMED", "ALL" ]
          },
          "recordedTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "consumedTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "lockId" : {
            "type" : "string"
          },
          "relevancyStatus" : {
            "type" : "string",
            "enum" : [ "RELEVANT", "NOT_RELEVANT", "ALL" ]
          },
          "lockUpdateTime" : {
            "type" : "string",
            "description" : "JSR310 encoded time representation of Instant"
          },
          "constraintType" : {
            "type" : "string",
            "enum" : [ "ALWAYS_ACCEPT", "HASH", "CZ_WHITELISTED", "SIGNATURE" ]
          },
          "constraintData" : {
            "type" : "string",
            "format" : "binary"
          },
          "stateRef" : {
            "$ref" : "#/components/schemas/net.corda.core.schemas.PersistentStateRef"
          }
        }
      },
      "net.corda.core.crypto.SignedData_net_corda_core_flows_NotaryError" : {
        "required" : [ "raw", "sig" ],
        "type" : "object",
        "properties" : {
          "raw" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          },
          "sig" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          }
        }
      },
      "net.corda.notary.experimental.bftsmart.BFTSmart_ClusterResponse" : {
        "type" : "object"
      },
      "net.corda.notary.experimental.bftsmart.BFTSmart_ClusterResponse_Error" : {
        "required" : [ "errors" ],
        "type" : "object",
        "properties" : {
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/net.corda.core.crypto.SignedData_net_corda_core_flows_NotaryError"
            }
          }
        }
      },
      "net.corda.notary.experimental.bftsmart.BFTSmart_ClusterResponse_Signatures" : {
        "required" : [ "txSignatures" ],
        "type" : "object",
        "properties" : {
          "txSignatures" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Hex encoded Byte Array",
              "example" : "736F6D654279746573"
            }
          }
        }
      },
      "net.corda.notary.experimental.bftsmart.BFTSmart_CommitRequest" : {
        "type" : "object",
        "properties" : {
          "payload" : {
            "$ref" : "#/components/schemas/net.corda.core.flows.NotarisationPayload"
          },
          "callerIdentity" : {
            "$ref" : "#/components/schemas/net.corda.core.identity.Party"
          }
        }
      },
      "net.corda.notary.experimental.bftsmart.BFTSmart_ReplicaResponse" : {
        "type" : "object"
      },
      "net.corda.notary.experimental.bftsmart.BFTSmart_ReplicaResponse_Error" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "$ref" : "#/components/schemas/net.corda.core.crypto.SignedData_net_corda_core_flows_NotaryError"
          }
        }
      },
      "net.corda.notary.experimental.bftsmart.BFTSmart_ReplicaResponse_Signature" : {
        "required" : [ "txSignature" ],
        "type" : "object",
        "properties" : {
          "txSignature" : {
            "type" : "string",
            "description" : "Hex encoded Byte Array",
            "example" : "736F6D654279746573"
          }
        }
      }
    }
  }
}