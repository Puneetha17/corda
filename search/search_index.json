{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"web3j integration for Corda Introduction web3j-corda is a lightweight client library for working with CorDapps and interacting with different nodes on Corda network. Features Connect to a Corda node. Query the available CorDapps in the node. Generate CorDapp wrappers to interact with the deployed CorDapps. Generate automated tests using Docker containers to verify the working of CorDapp. Commandline tools","title":"Home"},{"location":"#web3j-integration-for-corda","text":"","title":"web3j integration for Corda"},{"location":"#introduction","text":"web3j-corda is a lightweight client library for working with CorDapps and interacting with different nodes on Corda network.","title":"Introduction"},{"location":"#features","text":"Connect to a Corda node. Query the available CorDapps in the node. Generate CorDapp wrappers to interact with the deployed CorDapps. Generate automated tests using Docker containers to verify the working of CorDapp. Commandline tools","title":"Features"},{"location":"client/","text":"web3j client wrappers for Corda Introduction Sample code generated by web3j-corda client can be divided into the following blocks: CorDapps Flows CorDapps block A CorDapp client file is generated for each CorDapp in the path specified to the generate command. This block encapsulates the all information related to the particular CorDapp in an interface. Example code is as follows: /** * CorDapp wrapper. */ @Path( /api/rest/cordapps/ name-of-cordapp-or-jar / ) interface name-of-cordapp : CorDapp { @get:Path( flows ) override val flows: FlowResource // Lists all the flows in a CorDapp // Contains flow definition /** * name-of-cordapp CorDapp lifecycle methods. */ companion object : LifeCycle name-of-cordapp { /** * Loads an existing name-of-cordapp CorDapp instance. */ @JvmStatic override fun load(corda: Corda) = ProxyBuilder.build( name-of-cordapp ::class.java, corda.service) } } Flows blocks Each individual CorDapp can have multiple flows which are listed in the CorDapp block. Each instance of flow can be used to start the flow, using underlying RPC calls. A flow can be defined as mentioned below: /** * Get the flow-name flow. */ @get:Path( flow-complete-path ) val flow-instance : flow-name /** * corDapp-name flow-name flow. */ interface flow-name : Flow { /** * Start the flow-name flow. */ @POST @Produces( application/json ) @Consumes( application/json ) fun start(parameters: flow-input-parameters ): flow-output-parameters }","title":"Client Wrappers"},{"location":"client/#web3j-client-wrappers-for-corda","text":"","title":"web3j client wrappers for Corda"},{"location":"client/#introduction","text":"Sample code generated by web3j-corda client can be divided into the following blocks: CorDapps Flows","title":"Introduction"},{"location":"client/#cordapps-block","text":"A CorDapp client file is generated for each CorDapp in the path specified to the generate command. This block encapsulates the all information related to the particular CorDapp in an interface. Example code is as follows: /** * CorDapp wrapper. */ @Path( /api/rest/cordapps/ name-of-cordapp-or-jar / ) interface name-of-cordapp : CorDapp { @get:Path( flows ) override val flows: FlowResource // Lists all the flows in a CorDapp // Contains flow definition /** * name-of-cordapp CorDapp lifecycle methods. */ companion object : LifeCycle name-of-cordapp { /** * Loads an existing name-of-cordapp CorDapp instance. */ @JvmStatic override fun load(corda: Corda) = ProxyBuilder.build( name-of-cordapp ::class.java, corda.service) } }","title":"CorDapps block"},{"location":"client/#flows-blocks","text":"Each individual CorDapp can have multiple flows which are listed in the CorDapp block. Each instance of flow can be used to start the flow, using underlying RPC calls. A flow can be defined as mentioned below: /** * Get the flow-name flow. */ @get:Path( flow-complete-path ) val flow-instance : flow-name /** * corDapp-name flow-name flow. */ interface flow-name : Flow { /** * Start the flow-name flow. */ @POST @Produces( application/json ) @Consumes( application/json ) fun start(parameters: flow-input-parameters ): flow-output-parameters }","title":"Flows blocks"},{"location":"command_line_tools/","text":"Command line tools A web3j-corda fat jar is distributed with each release providing command line tools. The following functionality of web3j-corda is exposed from the command line: Generate a template CorDapp project and the respective client wrappers Generate client wrappers for existing CorDapps Using web3j-corda new command To generate a template CorDapp project along with the client wrappers: web3j-corda new -n= corDappName -o= outputDir -p= packageName Using web3j-corda generate command To generate a web3j-corda client wrappers for existing CorDapps: web3j-corda generate (-u= openApiUrl | -d= corDappsDir ) -o= outputDir -p= packageName","title":"Command Line Tools"},{"location":"command_line_tools/#command-line-tools","text":"A web3j-corda fat jar is distributed with each release providing command line tools. The following functionality of web3j-corda is exposed from the command line: Generate a template CorDapp project and the respective client wrappers Generate client wrappers for existing CorDapps","title":"Command line tools"},{"location":"command_line_tools/#using-web3j-corda-new-command","text":"To generate a template CorDapp project along with the client wrappers: web3j-corda new -n= corDappName -o= outputDir -p= packageName","title":"Using web3j-corda new command"},{"location":"command_line_tools/#using-web3j-corda-generate-command","text":"To generate a web3j-corda client wrappers for existing CorDapps: web3j-corda generate (-u= openApiUrl | -d= corDappsDir ) -o= outputDir -p= packageName","title":"Using web3j-corda generate command"},{"location":"connecting_to_node/","text":"Connect to a Corda Node To print all the nodes connected to the current node: val service = CordaService( http://localhost:9000/ ) // URL exposed by BRAID service val corda = Corda.build(service) corda.network.nodes.findAll() To query the list of all running CorDapps: val service = CordaService( http://localhost:9000/ ) // URL exposed by BRAID service val corda = Corda.build(service) corda.corDapps.findAll() To start a flow there are two options depending on whether you want to use a generated CorDapp wrapper or just the Corda API directly: Using Corda API This way works but is not type-safe, so can lead to runtime exceptions: // Initialise the parameters of the flow val params = InitiatorParameters( $1 , O=PartyA, L=London, C=GB , false) val issue = corda .corDapps.findById( obligation-cordapp ) .flows.findById( issue-obligation ) // Type-conversions with potential runtime exception! var signedTx = issue.start(parameters).convert SignedTransaction () Using the web3j CorDapp wrapper Please refer on how to use client wrappers in a type-safe way","title":"Connect to Corda Node"},{"location":"connecting_to_node/#connect-to-a-corda-node","text":"To print all the nodes connected to the current node: val service = CordaService( http://localhost:9000/ ) // URL exposed by BRAID service val corda = Corda.build(service) corda.network.nodes.findAll() To query the list of all running CorDapps: val service = CordaService( http://localhost:9000/ ) // URL exposed by BRAID service val corda = Corda.build(service) corda.corDapps.findAll() To start a flow there are two options depending on whether you want to use a generated CorDapp wrapper or just the Corda API directly:","title":"Connect to a Corda Node"},{"location":"connecting_to_node/#using-corda-api","text":"This way works but is not type-safe, so can lead to runtime exceptions: // Initialise the parameters of the flow val params = InitiatorParameters( $1 , O=PartyA, L=London, C=GB , false) val issue = corda .corDapps.findById( obligation-cordapp ) .flows.findById( issue-obligation ) // Type-conversions with potential runtime exception! var signedTx = issue.start(parameters).convert SignedTransaction ()","title":"Using Corda API"},{"location":"connecting_to_node/#using-the-web3j-cordapp-wrapper","text":"Please refer on how to use client wrappers in a type-safe way","title":"Using the web3j CorDapp wrapper"},{"location":"generating/","text":"Generating web3j client wrappers There are two ways to generate web3j client wrappers for given CorDapps. Using command-line tool Using gradle task Using command-line tool Please refer to command line tools Using gradle task We should add the task to generate the CorDapp client wrappers using the following: task generateCorDappWrappers(type: JavaExec, group: 'corda') { classpath = sourceSets.main.runtimeClasspath main = 'org.web3j.corda.console.CordaCommandMain' args 'generate', '--package-name', 'org.web3j.corda', '--cordapps-dir', $projectDir , '--output-dir', $projectDir/clients } It exposes a gradle task generateCorDappWrappers which can be invoked to generate client wrappers for the CorDapps.","title":"Generating Client Wrappers"},{"location":"generating/#generating-web3j-client-wrappers","text":"There are two ways to generate web3j client wrappers for given CorDapps. Using command-line tool Using gradle task","title":"Generating web3j client wrappers"},{"location":"generating/#using-command-line-tool","text":"Please refer to command line tools","title":"Using command-line tool"},{"location":"generating/#using-gradle-task","text":"We should add the task to generate the CorDapp client wrappers using the following: task generateCorDappWrappers(type: JavaExec, group: 'corda') { classpath = sourceSets.main.runtimeClasspath main = 'org.web3j.corda.console.CordaCommandMain' args 'generate', '--package-name', 'org.web3j.corda', '--cordapps-dir', $projectDir , '--output-dir', $projectDir/clients } It exposes a gradle task generateCorDappWrappers which can be invoked to generate client wrappers for the CorDapps.","title":"Using gradle task"},{"location":"getting_started/","text":"Getting started Add the relevant dependency to your project: Maven dependency groupId org.web3j.corda /groupId artifactId web3j-corda-core /artifactId version 0.1.0-SNAPSHOT /version /dependency Gradle dependencies { implementation 'org.web3j.corda:web3j-corda-core:0.1.0-SNAPSHOT' }","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"Add the relevant dependency to your project:","title":"Getting started"},{"location":"getting_started/#maven","text":"dependency groupId org.web3j.corda /groupId artifactId web3j-corda-core /artifactId version 0.1.0-SNAPSHOT /version /dependency","title":"Maven"},{"location":"getting_started/#gradle","text":"dependencies { implementation 'org.web3j.corda:web3j-corda-core:0.1.0-SNAPSHOT' }","title":"Gradle"},{"location":"modules/","text":"Modules To provide greater flexibility for developers wishing to work with web3j-corda, the project is made up of a number of modules. In dependency order, they are as follows: common - api - codegen - corDapp client generators core - console - command-line tools","title":"Modules"},{"location":"modules/#modules","text":"To provide greater flexibility for developers wishing to work with web3j-corda, the project is made up of a number of modules. In dependency order, they are as follows: common - api - codegen - corDapp client generators core - console - command-line tools","title":"Modules"},{"location":"quickstart/","text":"Quick start A web3j-corda sample project is available that demonstrates a number of core features of web3j-corda, including: Generate CorDapp client wrappers for deployed CorDapps. Interact with a CorDapp listing its nodes and starting flows. Generate automated tests using Docker containers to verify the working of CorDapp.","title":"Quickstart"},{"location":"quickstart/#quick-start","text":"A web3j-corda sample project is available that demonstrates a number of core features of web3j-corda, including: Generate CorDapp client wrappers for deployed CorDapps. Interact with a CorDapp listing its nodes and starting flows. Generate automated tests using Docker containers to verify the working of CorDapp.","title":"Quick start"},{"location":"usage/","text":"Using Client Wrappers By using the wrappers generated by the web3j-corda command, one can interact with a CorDapp in a type-safe way: // Initialise the test network lateinit var network: CordaNetwork // Initialise the parameters of the flow lateinit var parameters: flow-input-parameters // Start the flow with typed parameters and response val output = corDapp-name .load(network.nodes[ party-to-invoke-flow ].api).flows. flow-instance .start(parameters)","title":"Using the wrappers"},{"location":"usage/#using-client-wrappers","text":"By using the wrappers generated by the web3j-corda command, one can interact with a CorDapp in a type-safe way: // Initialise the test network lateinit var network: CordaNetwork // Initialise the parameters of the flow lateinit var parameters: flow-input-parameters // Start the flow with typed parameters and response val output = corDapp-name .load(network.nodes[ party-to-invoke-flow ].api).flows. flow-instance .start(parameters)","title":"Using Client Wrappers"}]}