plugins {
    id 'application'
    id 'distribution'
}

mainClassName = 'org.web3j.corda.console.CordaCommandMain'
applicationName = 'web3j-corda'

dependencies {
    api project(':web3j-corda-core')
    api project(':web3j-corda-codegen')

    api("javax.annotation:javax.annotation-api:${versions.annotationApi}")

    implementation(group: 'io.bluebank.braid', name: 'braid-corda', version: versions.braid, changing: true) {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.jetbrains.kotlin'
        exclude group: 'net.corda.plugins'
    }

//  FIXME Should be removed but for some reason Braid loads it
    implementation "net.corda:corda-webserver-impl:${versions.corda}"
    implementation("net.corda:corda-node:${versions.corda}") {
//  FIXME Should be uncommented but for some reason Braid loads it
//  exclude group: 'org.apache.logging.log4j' 
    }
    implementation "info.picocli:picocli:${versions.picocli}"
    implementation "org.gradle:gradle-tooling-api:${versions.gradle}"

    testImplementation gradleTestKit()

    integrationTestImplementation project(path: ':web3j-corda-common', configuration: 'integrationTest')
    integrationTestImplementation project(':web3j-corda-common').sourceSets.integrationTest.output // FIXME
}

sourceSets {
    integrationTest {
        kotlin {
            srcDir {
                "$buildDir/generated/source/web3j-corda/src/main/kotlin"
            }
            srcDir {
                "$buildDir/generated/source/web3j-corda/src/test/kotlin"
            }
        }
    }
}

task generateCorDappWrappers(type: JavaExec, group: 'corda') {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.web3j.corda.console.CordaCommandMain'

    args 'generate', '--package', 'org.web3j.corda.obligation',
            '--cordappsDir', "$projectDir/src/test/resources/cordapps",
            '--outputDir', "$buildDir/generated/source/web3j-corda"
}

compileIntegrationTestJava {
    mustRunAfter 'generateCorDappWrappers'
}

compileIntegrationTestKotlin {
    mustRunAfter 'generateCorDappWrappers'
}
