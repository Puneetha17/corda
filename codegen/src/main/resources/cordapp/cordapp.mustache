package {{apiPackage}}

{{#imports}}import {{import}}
{{/imports}}

import org.web3j.corda.api.CorDapp
import org.web3j.corda.api.Flow
import org.web3j.corda.dapps.LifeCycle
import org.web3j.corda.model.CordaX500Name
import org.web3j.corda.protocol.Corda
import org.web3j.corda.protocol.ProxyBuilder
import java.io.File
import javax.annotation.Generated
import javax.validation.Valid
import javax.ws.rs.Consumes
import javax.ws.rs.POST
import javax.ws.rs.Path
import javax.ws.rs.Produces

/**
* {{cordappName}} CorDapp wrapper.
*/
@Path("{{basePathWithoutHost}}/cordapps/{{classVarName}}/")
@Generated(
value = ["org.web3j.corda.codegen.CorDappGenerator"],
date = ""
)
interface {{classname}} : CorDapp {
{{#operations}}
@get:Path("flows")
override val flows: FlowResource

interface FlowResource : org.web3j.corda.api.FlowResource {
{{#flows}}
/**
* Get the {{#titlecase}}{{#camelcase}}{{flowId}}{{/camelcase}}{{/titlecase}} flow.
*/
@get:Path("{{flowPath}}")
val {{#camelcase}}{{flowId}}{{/camelcase}}: {{#titlecase}}{{#camelcase}}{{flowId}}{{/camelcase}}{{/titlecase}}

/**
* {{classname}} {{#titlecase}}{{#camelcase}}{{flowId}}{{/camelcase}}{{/titlecase}} flow.
*/
interface {{#titlecase}}{{#camelcase}}{{flowId}}{{/camelcase}}{{/titlecase}} : Flow {

/**
* Start the {{#titlecase}}{{#camelcase}}{{flowId}}{{/camelcase}}{{/titlecase}} flow.
*/
@POST
@Produces("{{produces}}")
@Consumes("{{consumes}}")
fun start(@Valid parameters: {{inputClass}}): {{outputClass}}
}
{{/flows}}
}

/**
* {{classname}} CorDapp lifecycle methods.
*/
companion object : LifeCycle<{{classname}}> {

override fun upgrade(corda: Corda, file: File): {{classname}} = TODO("not implemented")

override fun deploy(corda: Corda, file: File): {{classname}} = TODO("not implemented")

/**
* Loads an existing {{classname}} CorDapp instance.
*/
@JvmStatic
override fun load(corda: Corda) = ProxyBuilder.build({{classname}}::class.java, corda.service)
}
{{/operations}}
}
