package org.web3j.corda.codegen

import com.squareup.kotlinpoet.AnnotationSpec
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import javax.annotation.processing.Generated
import javax.ws.rs.Path

open class CorDappGenerator {
    companion object {
        fun obligationGenerator() {
            val obligationInterface = ClassName("", "Obligation")

            val obligationResource = PropertySpec.builder("buzz", String::class)
                            .initializer("%S", "buzz")
                    .addAnnotation(AnnotationSpec.builder(Path::class)
                            .useSiteTarget(AnnotationSpec.UseSiteTarget.GET)
                            .addMember("%S", "flows").build())
                            .build()

            val file = FileSpec.builder("", "ExampleFlow")
                    .addType(TypeSpec.interfaceBuilder(obligationInterface)
                            .addAnnotation(AnnotationSpec.builder(Path::class)
                                    .addMember("%S", "api/rest/cordapps/obligation-cordapp").build())
                            .addAnnotation(AnnotationSpec.builder(Generated::class)
                                    .addMember("comments = %S", "This is generated by web3j-corda").build())
                            .addProperty(obligationResource)
                            .build()).build().writeTo(System.out)
        }
    }
}