buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.50'
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:2.1.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.24.0'
        classpath 'com.adarshr:gradle-test-logger-plugin:1.7.0'
    }
}

description = 'Integrates web3j with the Corda blockchain platform.'

ext {
    loadPropsFromFile = { String path ->
        def props = new Properties()
        def propsFile = file(path)
        if (propsFile.exists()) {
            propsFile.withReader { reader ->
                props.load(reader)
            }
        }
        props
    }
    versions = loadPropsFromFile("$rootDir/versions.properties")
    ossrhUsername = project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : System.getenv('OSSRH_USERNAME')
    ossrhPassword = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : System.getenv('OSSRH_PASSWORD')
    ossrhRepoUrl = project.hasProperty('ossrhRepoUrl') ? project.property('ossrhRepoUrl') : System.getenv('OSSRH_REPO_URL')
    ossrhSnapshotRepoUrl = project.hasProperty('ossrhSnapshotRepoUrl') ? project.property('ossrhSnapshotRepoUrl') : System.getenv('OSSRH_SNAPSHOT_REPO_URL')
    bintrayUser = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    bintrayKey = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    bintrayGpgPassphrase = project.hasProperty('bintrayGpgPassphrase') ? project.property('bintrayGpgPassphrase') : System.getenv('BINTRAY_GPG_PASSPHRASE')
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.unbroken-dome.test-sets'
    apply plugin: 'com.diffplug.gradle.spotless'
    apply plugin: 'com.adarshr.test-logger'

    repositories {
        jcenter()
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
        maven { url 'http://ci-artifactory.corda.r3cev.com/artifactory/corda-dependencies' }
        maven { url 'https://dl.bintray.com/r3/corda/' }
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
            mavenContent {
                snapshotsOnly()
            }
        }
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    testSets {
        integrationTest {
            dirName = 'integration-test'
        }
    }

    tasks.withType(Test) {
        useJUnitPlatform()
        systemProperties = [
                'junit.jupiter.extensions.autodetection.enabled': 'true',
                'junit.jupiter.testinstance.lifecycle.default'  : 'per_class'
        ]
    }

    configurations {
        testOutput.extendsFrom(testCompile)
        integrationTestOutput.extendsFrom(integrationTestCompile)
    }

    artifacts {
        archives sourcesJar
        testOutput testJar
        integrationTestOutput integrationTestJar
    }

    testlogger {
        showStandardStreams true
    }

    dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        implementation 'org.jetbrains.kotlin:kotlin-reflect'
        implementation 'org.jetbrains.kotlin:kotlin-noarg'
        implementation 'org.jetbrains.kotlin:kotlin-native-utils'

        implementation("org.jetbrains:annotations:${versions.annotations}") { force = true }

        implementation("ch.qos.logback:logback-classic:${versions.logback}") { force = true }
        implementation("org.slf4j:slf4j-api:${versions.slf4j}") { force = true }
        implementation("org.slf4j:slf4j-ext:${versions.slf4j}") { force = true }
        implementation("org.slf4j:jcl-over-slf4j:${versions.slf4j}") { force = true }
        implementation("org.slf4j:jul-to-slf4j:${versions.slf4j}") { force = true }

        configurations.all {
            resolutionStrategy {
                force(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jackson)
                force(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jackson)
                force(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson)
                force(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: versions.jackson)
                force(group: 'com.fasterxml.jackson.module', name: 'jackson-module-jaxb-annotations', version: versions.jackson)
                force(group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: versions.jackson)
                force(group: 'com.google.errorprone', name: 'error_prone_annotations', version: versions.errorProneAnnotations)
                force(group: 'com.google.guava', name: 'guava', version: versions.guava)
                force(group: 'commons-io', name: 'commons-io', version: versions.commonsIo)
                force(group: 'io.swagger.core.v3', name: 'swagger-annotations', version: versions.swagger3)
                force(group: 'io.swagger.core.v3', name: 'swagger-core', version: versions.swagger3)
                force(group: 'io.swagger.core.v3', name: 'swagger-models', version: versions.swagger3)
                force(group: 'net.bytebuddy', name: 'byte-buddy', version: versions.byteBuddy)
                force(group: 'org.glassfish.jersey.containers', name: 'jersey-container-jetty-http', version: versions.jersey)
                force(group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet-core', version: versions.jersey)
                force(group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: versions.jersey)
                force(group: 'org.glassfish.jersey.core', name: 'jersey-client', version: versions.jersey)
                force(group: 'org.glassfish.jersey.ext', name: 'jersey-proxy-client', version: versions.jersey)
                force(group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: versions.jersey)
                force(group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: versions.jersey)
            }
            exclude group: 'com.ea.agentloader'
            exclude group: 'com.github.ben-manes.caffeine'
            exclude group: 'com.github.bft-smart'
            exclude group: 'com.github.fge'
            exclude group: 'com.github.java-json-tools'
            exclude group: 'com.github.joschi.jackson'
            exclude group: 'com.github.mifmif'
            exclude group: 'com.google.code.findbugs'
            exclude group: 'com.google.errorprone'
            exclude group: 'com.google.j2objc'
            exclude group: 'com.google.jimfs'
            exclude group: 'com.googlecode.json-simple'
            exclude group: 'com.googlecode.libphonenumber'
            exclude group: 'com.h2database'
            exclude group: 'com.intellij'
            exclude group: 'com.jcabi'
            exclude group: 'com.mattbertolini'
            exclude group: 'com.palominolabs.metrics'
            exclude group: 'com.squareup.okhttp3'
            exclude group: 'com.squareup.okio'
            exclude group: 'com.typesafe'
            exclude group: 'com.zaxxer'
            exclude group: 'io.atomix.catalyst'
            exclude group: 'io.atomix.copycat'
            exclude group: 'io.vertx', module: 'vertx-auth-jwt'
            exclude group: 'io.vertx', module: 'vertx-auth-shiro'
            exclude group: 'io.vertx', module: 'vertx-rx-gen'
            exclude group: 'io.vertx', module: 'vertx-rx-java'
            exclude group: 'net.corda.plugins'
            exclude group: 'net.java.dev.jna'
            exclude group: 'net.sf.jopt-simple'
            exclude group: 'net.sf.jpam'
            exclude group: 'org.apache.activemq'
            exclude group: 'org.apache.logging.log4j'
            exclude group: 'org.apache.mina'
            exclude group: 'org.apache.qpid'
            exclude group: 'org.apache.shiro'
            exclude group: 'org.apache.sshd'
            exclude group: 'org.apiguardian'
            exclude group: 'org.checkerframework'
            exclude group: 'org.codehaus.groovy'
            exclude group: 'org.codehaus.mojo'
            exclude group: 'org.fusesource.jansi'
            exclude group: 'org.hdrhistogram'
            exclude group: 'org.hibernate'
            exclude group: 'org.iq80.snappy'
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jre7'
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jre8'
            exclude group: 'org.latencyutils'
            exclude group: 'org.liquibase'
            exclude group: 'org.mozilla'
            exclude group: 'org.postgresql'
            exclude group: 'org.rnorth.duct-tape'
            exclude group: 'org.rnorth.visible-assertions'
            exclude group: 'org.rnorth'
            exclude group: 'org.scijava:native-lib-loader'
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }

        implementation "io.github.microutils:kotlin-logging:${versions.kLogging}"

        implementation("com.pinterest.ktlint:ktlint-core:${versions.ktlint}") {
            exclude group: 'org.apache.commons'
            exclude group: 'org.apache.httpcomponents'
            exclude group: 'org.slf4j'
        }
        implementation "com.pinterest.ktlint:ktlint-ruleset-standard:${versions.ktlint}"
        implementation "com.pinterest.ktlint:ktlint-ruleset-experimental:${versions.ktlint}"

        testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junit5}"
        testImplementation "com.willowtreeapps.assertk:assertk-jvm:${versions.assertk}"
        testImplementation "junit:junit:${versions.junit4}"
        testImplementation("io.mockk:mockk:${versions.mockk}") {
            exclude group: 'org.jetbrains.kotlin'
        }

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit5}"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${versions.junit5}"
        testRuntimeOnly "org.jetbrains.kotlin:kotlin-script-util"

        integrationTestImplementation "org.testcontainers:testcontainers:${versions.testcontainers}"
        integrationTestImplementation "org.testcontainers:junit-jupiter:${versions.testcontainers}"
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    compileKotlin.kotlinOptions.jvmTarget = sourceCompatibility
    compileTestKotlin.kotlinOptions.jvmTarget = sourceCompatibility
    compileIntegrationTestKotlin.kotlinOptions.jvmTarget = sourceCompatibility

    spotless {
        kotlin {
            // This path needs to be relative to each project
            target fileTree('.') {
                include '**/*.kt'
                exclude '**/.gradle/**'
            }
//            FIXME spotless breaks with ktlint version 0.32 + (https://github.com/diffplug/spotless/issues/419)
//            ktlint(versions.ktlint)
            trimTrailingWhitespace()
            licenseHeaderFile "${rootDir}/gradle/spotless.license"
            endWithNewline()
        }
        java {
            // This path needs to be relative to each project
            target fileTree('.') {
                include '**/src/*/java/**/*.java'
                exclude '**/.gradle/**'
                exclude '**/generated/**'
            }
            removeUnusedImports()
            googleJavaFormat("1.7").aosp()
            importOrder 'java', '', 'org.web3j', '\\#'
            trimTrailingWhitespace()
            endWithNewline()
            licenseHeaderFile "${rootDir}/gradle/spotless.license"
            paddedCell()
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId = project.group
                artifactId = project.name
                version = project.version
                from components.java
                artifact sourcesJar
                artifact integrationTestJar
                pom {
                    name = project.name
                    description = project.description
                    url = "https://github.com/web3j/web3j-corda"
                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                            distribution = "repo"
                        }
                    }
                    developers {
                        developer {
                            id = 'xaviarias'
                            name = 'Xavier Arias'
                            email = 'xavier@web3labs.com'
                            organization = 'Web3 Labs'
                        }
                    }
                    scm {
                        connection = "scm:git:https://github.com/web3j/web3j-corda.git"
                        developerConnection = "scm:git://github.com/web3j/web3j-corda.git"
                        url = "https://github.com/web3j/web3j-corda.git"
                    }
                }
            }
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: ossrhRepoUrl) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                snapshotRepository(url: ossrhSnapshotRepoUrl) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                pom.project {
                    packaging 'jar'
                    name 'web3j Corda Integration'
                    description rootProject.description
                    url 'https://web3j.io'
                    scm {
                        connection 'scm:git:https://github.com/web3j/web3j-corda.git'
                        url 'https://github.com/web3j/web3j-corda.git'
                        developerConnection 'scm:git://github.com/web3j/web3j-corda.git'
                    }
                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = 'xaviarias'
                            name = 'Xavier Arias'
                            email = 'xavier@web3labs.com'
                            organization = 'Web3 Labs'
                        }
                    }
                }
            }
        }
    }

    bintray {
        user = bintrayUser
        key = bintrayKey
        publications = ['maven']
        publish = true
        pkg {
            repo = 'maven'
            name = project.name
            desc = project.description
            userOrg = 'web3j'
            licenses = ['Apache-2.0']
            issueTrackerUrl = 'https://github.com/web3j/web3j-corda/issues'
            vcsUrl = 'https://github.com/web3j/web3j-corda.git'
            websiteUrl = 'https://web3j.io'
            publicDownloadNumbers = true
            version {
                gpg {
                    sign = true
                    passphrase = bintrayGpgPassphrase
                }
                mavenCentralSync {
                    sync = true
                    user = ossrhUsername
                    password = ossrhPassword
                    close = '1'
                }
            }
        }
    }
}